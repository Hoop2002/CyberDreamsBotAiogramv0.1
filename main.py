import asyncio
import logging
import load_logs
import input_cmd
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class FSMUser(StatesGroup):
    lesson_type = State()  # —Ç–∏–ø —É—Ä–æ–∫–∞
    name = State()  # –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    phone_number = State()  # –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    visit_time = State()  # —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞


"""
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤, –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
# p.s. –ê–¥–º–∏–Ω–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è
class FSMAdmin(StatesGroup):
    tg_name = State()
    tg_id = State()
    password = State()
"""

# FSM - –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –±—É–¥–µ—Ç –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫—É
# –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã! –¢–∞–∫ –∫–∞–∫ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª—è—Ç—å—Å—è
# –ù–æ –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∏–≥–¥–µ –Ω–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è
# –ö—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
storage = MemoryStorage()

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è -- –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = Bot(token="")

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
disp = Dispatcher(bot=bot, storage=storage)

"""
# –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ /admin
@disp.message_handler(commands=["admin"], state=None)
async def command_admin_–∞uthorization(message: types.Message):
    await FSMAdmin.tg_name.set()
    await message.reply("send password:")
    await FSMAdmin.next()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
@disp.message_handler(content_types=["text"], state=FSMAdmin.all_states)
async def admin_data_password(message: types.Message, state: FSMAdmin.password):
    async with state.proxy() as data:
        data['password'] = message.text
        data['tg_name'] = message.from_user.first_name
        data['tg_id'] = message.from_user.id
    if data['password'] == "qwerty":
        await message.reply(f"welcome! {data['tg_name']}, {data['tg_id']}")
        await state.finish()
    else:
        await message.reply("sorry!")
        await state.finish()
"""


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@disp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    input_cmd.cmd_log(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    item = "/–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
    markup.add(item)
    await message.answer("ü§ñ–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —É—á–µ–Ω–∏–∫–∞–º–∏ü§ñ\n"
                         "ü§ñ–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—èü§ñ", reply_markup=markup)


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è
@disp.message_handler(commands=["–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"], state=None)
async def command_start_registration(message: types.Message):
    input_cmd.cmd_log(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    item1 = "–ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ"
    item2 = "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"
    markup.add(item1, item2)
    await FSMUser.lesson_type.set()
    await message.reply("–ù–∞ –∫–∞–∫–æ–π –∏–∑ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                        reply_markup=markup)


# –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@disp.message_handler(content_types=["text"], state=FSMUser.lesson_type)
async def load_lesson_type(message: types.Message, state: FSMContext):
    input_cmd.cmd_log(message)
    async with state.proxy() as data:
        data['lesson_type'] = message.text
    await FSMUser.next()
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û", reply_markup=types.ReplyKeyboardRemove())


# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@disp.message_handler(state=FSMUser.name)
async def load_name(message: types.Message, state: FSMContext):
    input_cmd.cmd_log(message)
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMUser.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–ü—Ä–∏–º–µ—Ä: 7-999-999-99-99)")


# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@disp.message_handler(state=FSMUser.phone_number)
async def load_name(message: types.Message, state: FSMContext):
    input_cmd.cmd_log(message)
    async with state.proxy() as data:
        data['phone_number'] = message.text
    await FSMUser.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–¥–æ–±–Ω–æ–≥–æ –≤–∞–º –≤–∏–∑–∏—Ç–∞(–ü—Ä–∏–º–µ—Ä: 17.11.22 18:30)")


# –õ–æ–≤–∏–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
@disp.message_handler(state=FSMUser.visit_time)
async def load_visit_time(message: types.Message, state: FSMContext):
    input_cmd.cmd_log(message)
    async with state.proxy() as data:
        data['visit_time'] = message.text
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞–ø–∏—Å—å!\n"
                         "üíª–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—èüíª")
    await state.finish()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –±–æ—Ç –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
    load_logs.load_txt(data['name'], data['phone_number'], data['lesson_type'], data['visit_time'])

    with open("admins.txt", "r") as admins_file:
        for i in admins_file:
            i = str(i).replace("\n", "")
            await bot.send_message(chat_id=int(i), text="–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è!")
            await bot.send_message(chat_id=int(i), text="–§–ò–û - {0}\n"
                                                        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {1}\n"
                                                        "–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è - {2}\n"
                                                        "–í—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞ - {3}".format(data['name'],
                                                                                    data['phone_number'],
                                                                                    data['lesson_type'],
                                                                                    data['visit_time']))


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def main():
    print("[log] - –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    await disp.start_polling()


if __name__ == "__main__":
    asyncio.run(main())
